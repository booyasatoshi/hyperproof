# custom_apps_api.py
# 
# This module provides functionality for interacting with the Custom Apps API of Hyperproof.
# Author: Virgil Vaduva
# Timestamp: 2024-09-25
# License: This project is licensed under the GNU General Public License (GPL).
#
# Description:
# The CustomAppsAPI class handles operations such as retrieving, adding, updating,
# deleting, and retrieving events/statistics for custom apps.

from .utils import logger

class CustomAppsAPI:
    """
    This class handles interactions with the Custom Apps API of Hyperproof.
    It allows for retrieving, adding, updating, deleting, and retrieving events/statistics for custom apps.
    """
    BASE_URL = "https://api.hyperproof.app/v1/customapps"

    def __init__(self, api_client):
        # Use the shared API client
        self.client = api_client

    def get_custom_apps(self, raw=False):
        """
        Retrieves the custom apps installed in an organization.

        :param raw: If True, return raw response text; otherwise return parsed JSON.
        :return: Response data in the desired format (raw or parsed JSON).
        """
        return self.client.get(self.BASE_URL, "/", raw=raw)

    def add_custom_app(self, app_type, is_custom, org_id, package_name, package_version, deployment_status="pending", raw=False):
        """
        Adds a new custom app to the organization.

        :param app_type: Type of the app (e.g., 'hypersync').
        :param is_custom: Boolean indicating if the app is custom.
        :param org_id: ID of the organization where the app is installed.
        :param package_name: Name of the app package.
        :param package_version: Version of the app package.
        :param deployment_status: Deployment status (default is 'pending').
        :param raw: If True, return raw response text; otherwise return parsed JSON.
        :return: Response data in the desired format (raw or parsed JSON).
        """
        data = {
            "appType": app_type,
            "isCustom": is_custom,
            "orgId": org_id,
            "packageName": package_name,
            "packageVersion": package_version,
            "deploymentStatus": deployment_status
        }
        return self.client.post(self.BASE_URL, "/", data=data, raw=raw)

    def get_custom_app_by_id(self, app_id, raw=False):
        """
        Retrieves a specific custom app by its unique ID.

        :param app_id: The unique ID of the custom app to retrieve.
        :param raw: If True, return raw response text; otherwise return parsed JSON.
        :return: Response data in the desired format (raw or parsed JSON).
        """
        return self.client.get(self.BASE_URL, f"/{app_id}", raw=raw)

    def update_custom_app(self, app_id, app_type=None, is_custom=None, package_name=None, package_version=None, deployment_status=None, raw=False):
        """
        Updates a custom app that is installed in an organization.

        :param app_id: The unique ID of the custom app to update.
        :param app_type: Updated app type (optional).
        :param is_custom: Updated boolean indicating if the app is custom (optional).
        :param package_name: Updated package name (optional).
        :param package_version: Updated package version (optional).
        :param deployment_status: Updated deployment status (optional).
        :param raw: If True, return raw response text; otherwise return parsed JSON.
        :return: Response data in the desired format (raw or parsed JSON).
        """
        data = {
            "appType": app_type,
            "isCustom": is_custom,
            "packageName": package_name,
            "packageVersion": package_version,
            "deploymentStatus": deployment_status
        }
        return self.client.patch(self.BASE_URL, f"/{app_id}", data=data, raw=raw)

    def delete_custom_app(self, app_id, raw=False):
        """
        Deletes a custom app that is installed in an organization.

        :param app_id: The unique ID of the custom app to delete.
        :param raw: If True, return raw response text; otherwise return parsed JSON.
        :return: Response data in the desired format (raw or parsed JSON).
        """
        return self.client.delete(self.BASE_URL, f"/{app_id}", raw=raw)

    def get_custom_app_events(self, app_id, raw=False):
        """
        Retrieves log events generated by a custom app.

        :param app_id: The unique ID of the custom app.
        :param raw: If True, return raw response text; otherwise return parsed JSON.
        :return: Response data in the desired format (raw or parsed JSON).
        """
        return self.client.get(self.BASE_URL, f"/{app_id}/events", raw=raw)

    def get_custom_app_stats(self, app_id, raw=False):
        """
        Retrieves statistics for a custom app installed in the organization.

        :param app_id: The unique ID of the custom app.
        :param raw: If True, return raw response text; otherwise return parsed JSON.
        :return: Response data in the desired format (raw or parsed JSON).
        """
        return self.client.get(self.BASE_URL, f"/{app_id}/stats", raw=raw)
